---
title: "Descriptive statistics"
format: html
editor: visual
---

# 16.1 Packages we need

```{r}
# tables and graphs
library(questionr)
library(ggsci)
library(ggrain)
library(scales)

# descriptive statistics
library(dlookr)
library(EnvStats)
library(modeest)
library(MESS)
library(descriptr)

# data transformation
library(here)
library(tidyverse)
```

# 16.2 Importing the data

```{r}
library(readxl)
arrhythmia <- read_excel(here("data", "arrhythmia.xlsx"))
```

We take a look at the data:

```{r}
glimpse(arrhythmia)
```

We can get some basic summary measures for each variable:

```{r}
summary(arrhythmia)
```

We can convert the categorical variables `sex` and `bmi_cat` to factors:

```{r}
arrhythmia <- arrhythmia |>  
  mutate(sex = factor(sex),
         bmi_cat = factor(bmi_cat, levels = c("underweight", "normal",
                                              "overweight", "obese")))
```

```{r}
glimpse(arrhythmia)
```

# 16.3 Summarizing categorical data (frequency statistics)

We can generate a frequency table for the `sex` variable:

```{r}
freq(arrhythmia$sex, cum = T, total = T, valid = F)
```

Create the frequency table for the `bmi_cat` variable:

```{r}
freq(arrhythmia$bmi_cat, cum = T, total = T, valid = F)
```

To sort the BMI categories in decreasing order of frequencies:

```{r}
freq(arrhythmia$bmi_cat, cum = T, total = T, valid = F, sort = "dec")
```

To check whether the distribution of patients across each sex is different for each BMI category:

```{r}
tab <- table(arrhythmia$sex, arrhythmia$bmi_cat)
rprop(tab, percent = T, total = F, n = T)
```

# 16.4 Displaying categorical data

## 16.4.1 Simple bar plot

```{r}
# create a data frame with ordered BMI categories and their counts
dat1 <- arrhythmia |> 
  count(bmi_cat) |> 
  mutate(pct = round_percent(n, 1))

# plot the data
ggplot(dat1, aes(x = bmi_cat, y = pct)) +
  geom_col(width=0.65, fill = "steelblue4") +
  geom_text(aes(label=paste0(pct, "%")),
            vjust=1.6, color = "white", size = 7) +
  labs(x = "BMI category", y = "Percent",
       caption = "Number of patients: 428") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  theme_minimal(base_size = 20)
```

## 16.4.2 Side-by-side and grouped bar plots

```{r}
# create a data frame with ordered BMI categories and their counts by sex
dat2 <- arrhythmia |> 
  count(bmi_cat, sex) |>  
  group_by(sex) |> 
  mutate(pct = round_percent(n, 1)) |> 
  ungroup()

ggplot(dat2) + 
  geom_col(aes(bmi_cat, pct, fill = sex), width=0.7, position = "dodge") +
  geom_text(aes(bmi_cat, pct, label = paste0(pct, "%"), 
                group = sex), color = "white", size = 7, vjust=1.2,
            position = position_dodge(width = .9)) +
  labs(x = "BMI category", y = "Percent",
       caption = "female: n=237, male: n=191") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  scale_fill_jco() +
  theme_minimal(base_size = 20) +
  theme(legend.position="none",
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  facet_wrap(~sex, ncol = 2)
```

```{r}
ggplot(dat2) + 
  geom_col(aes(bmi_cat, pct, fill = sex), width = 0.8, position = "dodge") +
  geom_text(aes(bmi_cat, pct, label = paste0(pct, "%"), 
                group = sex), color = "white", size = 7, vjust=1.2,
            position = position_dodge(width = .9)) +
  labs(x = "BMI category", y = "Percent",
       caption = "female: n=237, male: n=191") +
  scale_y_continuous(labels = scales::percent_format(scale = 1)) +
  scale_fill_jco() +
  theme_minimal(base_size = 20)
```

## 16.4.3 Stacked bar plot

```{r}
# create a data frame with ordered BMI categories and their counts by sex
dat3 <- arrhythmia |> 
  group_by(sex) |> 
  count(bmi_cat) |> 
  mutate(pct = round_percent(n, 2)) |> 
  ungroup()

ggplot(dat3, aes(x = sex, y = pct, fill = forcats::fct_rev(bmi_cat)))+
  geom_bar(stat = "identity", width = 0.8)+
  geom_text(aes(label = paste0(round(pct, 1), "%"), y = pct), size = 6,
            position = position_stack(vjust = 0.5)) +
  coord_flip()+
  scale_fill_simpsons() +
  scale_y_continuous(labels = scales::percent_format(scale = 1))+
  labs(x = "Sex", y = "Percent", fill = "BMI category") +
  theme_minimal(base_size = 20)
```

# 16.5 Summarizing numerical data

Measures of central location:

-   mean

-   median

-   mode

Measures of dispersion:

-   variance

-   standard deviation

-   range (minimum, maximum)

-   interquartile range (1st and 3rd quartiles)

# 16.6 Summary statistics

## 16.6.1 Measures of central location

### 16.6.1.1 Sample mean or average

Let $x_1, x_2,...,x_{n-1}, x_n$ be a set of *n* measurements. The arithmetic sample mean or average, $\bar{x}$, is the sum of the observations divided by their number *n*, thus:

$$
\bar{x}= \frac{x_1 + x_2 + ... + x_{n-1} + x_n}{n} = \frac{1}{n}\sum_{i=1}^{n}x_{i}
$$ where $x_{i}$ represents the individual sample values and ${\sum_{i=1}^{n}x_{i}}$ their sum.

```{r}
mean(arrhythmia$age, na.rm = TRUE)
```

```{r}
arrhythmia |>  
  summarise(mean = mean(age, na.rm = TRUE))
```

### 16.6.1.2 Median of the sample

The **sample median**, *md*, is an alternative measure of location, which is less sensitive to outliers. The median is calculated by first sorting the observed values (i.e. arranging them in an ascending/descending order) and selecting the middle one. If the sample size *n* is **odd**, the median is the number at the middle of the ordered observations. If the sample size is **even**, the median is the average of the two middle numbers.

Therefore, the sample median, *md*, of *n* observations is:

-   the $\frac{n+1}{2}$th ordered value, $md=x_{\frac{n+1}{2}}$, if *n* is odd.

-   the average of the $\frac{n}{2}$th and $\frac{n+1}{2}$th ordered values, $md=\frac{1}{2}(x_{\frac{n}{2}}+x_{\frac{n+1}{2}})$, if *n* is even.

```{r}
median(arrhythmia$age, na.rm = TRUE)
```

```{r}
arrhythmia |>  
  summarise(median = median(age, na.rm = TRUE))
```

### 16.6.1.3 Mode of the sample

The mode is the value that occurs most frequently.

```{r}
modeest::mlv(arrhythmia$age, method = "mfv", na.rm = TRUE)
```

## 16.6.2 Measures of dispersion

### 16.6.2.1 Sample variance

Sample variance, $s^2$, is a measure of spread of the data. It is calculated by taking the sum of the squared deviations from the sample mean and dividing by $n-1$:

$$variance = s^2 = \frac{\sum\limits_{i=1}^n (x -\bar{x})^2}{n-1}$$

```{r}
var(arrhythmia$age, na.rm = TRUE)
```

```{r}
arrhythmia |>  
  summarise(variance = var(age, na.rm = TRUE))
```

### 16.6.2.2 Standard deviation of the sample

Standard deviation (denoted as *sd* or *s*) of a data set is the square root of the sample variance:

$$sd= s = \sqrt{s^2} = \sqrt\frac{\sum_{i=1}^{n}(x_{i}-\bar{x})^2}{n-1}$$

```{r}
sd(arrhythmia$age, na.rm = TRUE)
```

```{r}
arrhythmia |>  
  summarise(standard_deviation = sd(age, na.rm = TRUE))
```

### 16.6.2.3 Range of the sample

The Range is the difference between the minimum (lowest) and maximum (highest) values.

```{r}
range(arrhythmia$age, na.rm = TRUE)
```

```{r}
diff(range(arrhythmia$age, na.rm = TRUE))
```

### 16.6.2.4 Inter-quartile range of the sample

```{r}
IQR(arrhythmia$age, na.rm = TRUE)
```

```{r}
quantile(arrhythmia$age, prob=c(0.25, 0.75), na.rm = T, type=1)
```

Let's calculate the summary statistics for the `age` variable:

```{r}
arrhythmia |> 
  summarise(
    n = n(),
    na = sum(is.na(age)),
    min = min(age, na.rm = TRUE),
    q1 = quantile(age, 0.25, na.rm = TRUE),
    median = quantile(age, 0.5, na.rm = TRUE),
    q3 = quantile(age, 0.75, na.rm = TRUE),
    max = max(age, na.rm = TRUE),
    mean = mean(age, na.rm = TRUE),
    sd = sd(age, na.rm = TRUE),
    skewness = EnvStats::skewness(age, na.rm = TRUE),
    kurtosis= EnvStats::kurtosis(age, na.rm = TRUE)
  )
```

```{r}
arrhythmia |>  
  describe(age) |>  
  select(described_variables, n, na, mean, sd, 
         p25, p50, p75, skewness, kurtosis)|> 
  print(width = 100)
```

```{r}
arrhythmia |> 
  ds_tidy_stats(age) |> 
  print(width = 100)
```

Summary statistics: variable QRS

```{r}
arrhythmia |> 
  summarise(
    n = n(),
    na = sum(is.na(QRS)),
    min = min(QRS, na.rm = TRUE),
    q1 = quantile(QRS, 0.25, na.rm = TRUE),
    median = quantile(QRS, 0.5, na.rm = TRUE),
    q3 = quantile(QRS, 0.75, na.rm = TRUE),
    max = max(QRS, na.rm = TRUE),
    mean = mean(QRS, na.rm = TRUE),
    sd = sd(QRS, na.rm = TRUE),
    skewness = EnvStats::skewness(QRS, na.rm = TRUE),
    kurtosis= EnvStats::kurtosis(QRS, na.rm = TRUE)
  )
```

```{r}
arrhythmia |>  
  describe(QRS) |> 
  select(described_variables, n, na, mean, sd, 
         p25, p50, p75, skewness, kurtosis)|> 
  print(width = 100)
```

Summary statistics by group:

```{r}
summary_age_sex <- arrhythmia |> 
  group_by(sex) |> 
  summarise(
    n = n(),
    na = sum(is.na(age)),
    min = min(age, na.rm = TRUE),
    q1 = quantile(age, 0.25, na.rm = TRUE),
    median = quantile(age, 0.5, na.rm = TRUE),
    q3 = quantile(age, 0.75, na.rm = TRUE),
    max = max(age, na.rm = TRUE),
    mean = mean(age, na.rm = TRUE),
    sd = sd(age, na.rm = TRUE),
    skewness = EnvStats::skewness(age, na.rm = TRUE),
    kurtosis= EnvStats::kurtosis(age, na.rm = TRUE)
  ) |>  
  ungroup()

summary_age_sex
```

```{r}
arrhythmia |>  
  group_by(sex) |>  
  describe(age) |>  
  select(described_variables, sex, n, na, mean, sd,
         p25, p50, p75, skewness, kurtosis) |> 
  ungroup()|> 
  print(width = 100)
```

```{r, eval=FALSE}
library(writexl)
write_xlsx(summary_age_sex, here("data", "summary_age_sex.xlsx"))
```

```{r}
arrhythmia |> 
  group_by(sex) |> 
  summarise(
    n = n(),
    na = sum(is.na(QRS)),
    min = min(QRS, na.rm = TRUE),
    q1 = quantile(QRS, 0.25, na.rm = TRUE),
    median = quantile(QRS, 0.5, na.rm = TRUE),
    q3 = quantile(QRS, 0.75, na.rm = TRUE),
    max = max(QRS, na.rm = TRUE),
    mean = mean(QRS, na.rm = TRUE),
    sd = sd(QRS, na.rm = TRUE),
    skewness = EnvStats::skewness(QRS, na.rm = TRUE),
    kurtosis= EnvStats::kurtosis(QRS, na.rm = TRUE)
  ) |>  
  ungroup()
```

```{r}
arrhythmia |>  
  group_by(sex) |>  
  describe(QRS) |>  
  select(described_variables, sex, n, na, mean, sd,
         p25, p50, p75, skewness, kurtosis) |> 
  ungroup() |> 
  print(width = 100)
```

# 16.7 Displaying numerical data

## 16.7.1 Histogram / Density plot

```{r}
# Histogram of age
ggplot(arrhythmia, aes(x = age)) +
  geom_histogram(binwidth = 8, fill = "steelblue4",
                 color = "#8fb4d9", alpha = 0.6) +  
  theme_minimal(base_size = 20) +
  labs(title = "Histogram: age", y = "Frequency")
```

```{r}
# Histogram of QRS
ggplot(arrhythmia, aes(x = QRS)) +
  geom_histogram(binwidth = 8, fill = "steelblue4",      
                 color = "#8fb4d9", alpha = 0.6) +
  theme_minimal(base_size = 20) +
  labs(title = "Histogram: QRS", y = "Frequency")
```

```{r}
# density plot of age
ggplot(arrhythmia, aes(x = age)) +
  geom_density(fill="steelblue4", color="#8fb4d9", 
               adjust = 1.5, alpha=0.6) +
  theme_minimal(base_size = 20) +
  labs(title = "Density Plot: age", y = "Density")
```

```{r}
# density plot of QRS
ggplot(arrhythmia, aes(x = QRS)) +
  geom_density(fill="steelblue4", color="#8fb4d9", 
               adjust = 1.5, alpha=0.6) +
  theme_minimal(base_size = 20) +
  labs(title = "Density Plot: QRS", y = "Density")
```

## 16.7.2 Box Plot

```{r}
# box plot of age stratified by sex
ggplot(arrhythmia, aes(x = sex, y = age, fill = sex)) +
  geom_boxplot(alpha = 0.6, width = 0.5) +
  theme_minimal(base_size = 20) +
  labs(title = "Grouped Box Plot: age by sex") +
  scale_fill_jco() +
  theme(legend.position = "none")
```

```{r}
# box plot of QRS stratified by sex
ggplot(arrhythmia, aes(x = sex, y = QRS, fill = sex)) +
  geom_boxplot(alpha = 0.6, width = 0.5) +
  theme_minimal(base_size = 20) +
  labs(title = "Grouped Box Plot: QRS by sex") +
  scale_fill_jco() +
  theme(legend.position = "none")
```

An outlier is an observation that is significantly distant from the main body the data. We say any value outside of the following interval is an outlier: $$(Q_1 - 1.5 \times IQR, \ Q_3 + 1.5 \times IQR)$$

## 16.7.3 Raincloud Plot

```{r}
# raincloud plot of age stratified by sex
ggplot(arrhythmia, aes(sex, age, fill = sex)) +
  geom_rain(likert= TRUE, point.args = list(alpha = .3)) +
  theme_minimal(base_size = 20) +
  labs(title = "Grouped Raincloud Plots: age by sex") +
  scale_fill_jco() +
  theme(legend.position = "none")
```

```{r}
# raincloud plot of QRS stratified by sex
ggplot(arrhythmia, aes(sex, QRS, fill = sex)) +
  geom_rain(likert= TRUE, point.args = list(alpha = .3)) +
  theme_minimal(base_size = 20) +
  labs(title = "Grouped Raincloud Plots: QRS by sex") +
  scale_fill_jco() +
  theme(legend.position = "none")
```
